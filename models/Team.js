import mongoose from 'mongoose';
import slugify from 'mongoose-slug-generator';

const TeamSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'Please add a team name'],
    unique: true,
    trim: true,
    maxlength: [50, 'Name cannot be more than 50 characters']
  },
  slug: {
    type: String,
    slug: 'name',
    unique: true
  },
  logo: {
    type: String,
    default: 'default-team-logo.png'
  },
  captain: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: [true, 'Team must have a captain']
  },
  viceCaptain: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  members: [{
    user: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User'
    },
    role: {
      type: String,
      enum: ['batsman', 'bowler', 'all-rounder', 'wicket-keeper', 'other'],
      default: 'other'
    },
    joinedAt: {
      type: Date,
      default: Date.now
    },
    status: {
      type: String,
      enum: ['active', 'inactive', 'pending'],
      default: 'active'
    }
  }],
  description: {
    type: String,
    maxlength: [500, 'Description cannot be more than 500 characters']
  },
  establishedYear: Number,
  homeGround: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Turf'
  },
  location: {
    city: String,
    state: String,
    country: {
      type: String,
      default: 'India'
    }
  },
  skillLevel: {
    type: String,
    enum: ['beginner', 'intermediate', 'advanced', 'professional'],
    default: 'intermediate'
  },
  ageGroup: {
    type: String,
    enum: ['under-13', 'under-16', 'under-19', 'under-23', 'senior', 'veteran'],
    default: 'senior'
  },
  stats: {
    matchesPlayed: {
      type: Number,
      default: 0
    },
    matchesWon: {
      type: Number,
      default: 0
    },
    matchesLost: {
      type: Number,
      default: 0
    },
    matchesTied: {
      type: Number,
      default: 0
    },
    totalRunsScored: {
      type: Number,
      default: 0
    },
    totalWicketsTaken: {
      type: Number,
      default: 0
    }
  },
  achievements: [{
    title: String,
    description: String,
    date: Date
  }],
  socialMedia: {
    facebook: String,
    instagram: String,
    twitter: String,
    website: String
  },
  isPrivate: {
    type: Boolean,
    default: false
  },
  joinRequests: [{
    user: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User'
    },
    message: String,
    requestedAt: {
      type: Date,
      default: Date.now
    },
    status: {
      type: String,
      enum: ['pending', 'accepted', 'rejected'],
      default: 'pending'
    }
  }],
  createdAt: {
    type: Date,
    default: Date.now
  }
}, {
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});

// Create team slug from the name
TeamSchema.pre('save', function(next) {
  // Slug is automatically generated by the plugin
  next();
});

// Virtual field for upcoming bookings
TeamSchema.virtual('upcomingBookings', {
  ref: 'Booking',
  localField: '_id',
  foreignField: 'team',
  justOne: false,
  match: { bookingStatus: { $in: ['confirmed', 'pending'] } },
  options: { sort: { bookingDate: 1 } }
});

// Method to check if a user is a member of the team
TeamSchema.methods.isMember = function(userId) {
  return this.members.some(member => 
    member.user.toString() === userId.toString() && 
    member.status === 'active'
  );
};

// Method to check if a user is the captain or vice-captain
TeamSchema.methods.isTeamLeader = function(userId) {
  return (
    this.captain.toString() === userId.toString() ||
    (this.viceCaptain && this.viceCaptain.toString() === userId.toString())
  );
};

// Method to add a new member to the team
TeamSchema.methods.addMember = function(userId, role = 'other') {
  // Check if user is already a member
  if (this.isMember(userId)) {
    return false;
  }
  
  // Add user to members array
  this.members.push({
    user: userId,
    role,
    joinedAt: Date.now(),
    status: 'active'
  });
  
  return true;
};

// Method to remove a member from the team
TeamSchema.methods.removeMember = function(userId) {
  // Cannot remove captain
  if (this.captain.toString() === userId.toString()) {
    return false;
  }
  
  // Find member index
  const memberIndex = this.members.findIndex(
    member => member.user.toString() === userId.toString()
  );
  
  if (memberIndex === -1) {
    return false;
  }
  
  // Remove member
  this.members.splice(memberIndex, 1);
  
  // If removed user was vice-captain, clear that role
  if (this.viceCaptain && this.viceCaptain.toString() === userId.toString()) {
    this.viceCaptain = undefined;
  }
  
  return true;
};

const Team = mongoose.model('Team', TeamSchema);
export default Team;