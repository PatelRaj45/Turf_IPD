import mongoose from 'mongoose';
import slugify from 'mongoose-slug-generator';

// Initialize slug plugin
mongoose.plugin(slugify);

const TurfSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'Please add a turf name'],
    unique: true,
    trim: true,
    maxlength: [100, 'Name cannot be more than 100 characters']
  },
  slug: {
    type: String,
    slug: 'name',
    unique: true
  },
  description: {
    type: String,
    required: [true, 'Please add a description'],
    maxlength: [1000, 'Description cannot be more than 1000 characters']
  },
  sports: {
    type: [String],
    required: [true, 'Please specify supported sports'],
    enum: ['Cricket', 'Football', 'Basketball', 'Pickleball', 'Tennis', 'Volleyball', 'Badminton'],
    default: ['Cricket']
  },
  address: {
    street: {
      type: String,
      required: [true, 'Please add a street address']
    },
    city: {
      type: String,
      required: [true, 'Please add a city']
    },
    state: {
      type: String,
      required: [true, 'Please add a state']
    },
    zipCode: {
      type: String,
      required: [true, 'Please add a zip code']
    },
    country: {
      type: String,
      required: [true, 'Please add a country'],
      default: 'India'
    }
  },
  location: {
    // GeoJSON Point
    type: {
      type: String,
      enum: ['Point']
    },
    coordinates: {
      type: [Number],
      index: '2dsphere'
    },
    formattedAddress: String
  },
  photos: [String],
  phone: {
    type: String,
    required: [true, 'Please add a contact number']
  },
  email: {
    type: String,
    match: [
      /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/,
      'Please add a valid email'
    ]
  },
  website: String,
  turfType: {
    type: String,
    enum: ['Natural', 'Artificial', 'Hybrid'],
    required: [true, 'Please specify the turf type']
  },
  size: {
    length: Number, // in meters
    width: Number   // in meters
  },
  amenities: {
    parking: { type: Boolean, default: false },
    changeRoom: { type: Boolean, default: false },
    shower: { type: Boolean, default: false },
    waterCooler: { type: Boolean, default: false },
    floodlights: { type: Boolean, default: false },
    equipmentRental: { type: Boolean, default: false },
    cafeteria: { type: Boolean, default: false },
    scoreboard: { type: Boolean, default: false },
    pavilion: { type: Boolean, default: false },
    practiceNets: { type: Boolean, default: false }
  },
  pricing: {
    basePrice: {
      type: Number,
      required: [true, 'Please add a base price per hour']
    },
    weekendSurcharge: {
      type: Number,
      default: 0
    },
    peakHourSurcharge: {
      type: Number,
      default: 0
    },
    discountPercentage: {
      type: Number,
      default: 0,
      min: [0, 'Discount cannot be negative'],
      max: [100, 'Discount cannot exceed 100%']
    }
  },
  operatingHours: {
    monday: { open: String, close: String },
    tuesday: { open: String, close: String },
    wednesday: { open: String, close: String },
    thursday: { open: String, close: String },
    friday: { open: String, close: String },
    saturday: { open: String, close: String },
    sunday: { open: String, close: String }
  },
  timeSlots: [{
    startTime: String,
    endTime: String,
    sport: {
      type: String,
      enum: ['Cricket', 'Football', 'Basketball', 'Pickleball', 'Tennis', 'Volleyball', 'Badminton'],
      required: true
    },
    available: {
      type: Boolean,
      default: true
    }
  }],
  slotDuration: {
    type: Number,
    default: 60, // in minutes
    enum: [30, 60, 90, 120, 180]
  },
  maxPlayersPerSlot: {
    type: Number,
    default: 22
  },
  rating: {
    type: Number,
    min: [1, 'Rating must be at least 1'],
    max: [5, 'Rating cannot be more than 5']
  },
  reviews: [
    {
      user: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
      },
      rating: {
        type: Number,
        required: true,
        min: 1,
        max: 5
      },
      comment: String,
      createdAt: {
        type: Date,
        default: Date.now
      }
    }
  ],
  isActive: {
    type: Boolean,
    default: true
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
}, {
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});

// Create turf slug from the name
TurfSchema.pre('save', function(next) {
  // Slug is automatically generated by the plugin
  next();
});

// Cascade delete bookings when a turf is deleted
TurfSchema.pre('remove', async function(next) {
  await this.model('Booking').deleteMany({ turf: this._id });
  next();
});

// Virtual field for bookings
TurfSchema.virtual('bookings', {
  ref: 'Booking',
  localField: '_id',
  foreignField: 'turf',
  justOne: false
});

// Method to calculate dynamic price based on time, day, and demand
TurfSchema.methods.calculatePrice = function(date, hour) {
  let price = this.pricing.basePrice;
  const dayOfWeek = new Date(date).getDay();
  
  // Apply weekend surcharge (Saturday and Sunday)
  if (dayOfWeek === 0 || dayOfWeek === 6) {
    price += this.pricing.weekendSurcharge;
  }
  
  // Apply peak hour surcharge (typically evenings 5PM-9PM)
  if (hour >= 17 && hour <= 21) {
    price += this.pricing.peakHourSurcharge;
  }
  
  // Apply any discount
  if (this.pricing.discountPercentage > 0) {
    price = price * (1 - this.pricing.discountPercentage / 100);
  }
  
  return Math.round(price);
};

const Turf = mongoose.model('Turf', TurfSchema);
export default Turf;